@use "./dawuti.config" as dawuti;

@include dawuti.breakpoints();
@include dawuti.space-vars();
@include dawuti.wrappers-all();
@include dawuti.reset-all();
//animations
@include dawuti.animate-use-opacity();
@include dawuti.animate-use-scale();
@include dawuti.animate-use-translate();
@include dawuti.animate-use-rotate();
//@include dawuti.animate-use-scale-elastic();
@include dawuti.animate-use-skew();
@include dawuti.animate-use-dash();
@include dawuti.animate-use-filter();
body {
  #opacity {
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-opacity(1s 3s ease-in backwards, 0.2, 0.5);
      }
      &:nth-of-type(2) {
        @include dawuti.animate-opacity(1s 3s ease-in forwards, 0.2, 0.5);
      }
      &:nth-of-type(3) {
        @include dawuti.animate-opacity(1s 3s ease-in alternate, 0.2, 0.5);
      }
      &:nth-of-type(4) {
        @include dawuti.animate-opacity(1s 3s ease-in both, 0.2, 0.5);
      }
      &:nth-of-type(5) {
        @include dawuti.animate-opacity(1s 3s ease-in reverse both, 0.2, 0.5);
      }
      &:nth-of-type(6) {
        @include dawuti.animate-opacity(1s 3s ease-in both, 0.2, 0.5);
      }
    }
  }

  #translate {
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-translate( 1s 3s ease-in forwards, 20px, 0, 50px, 60px);
      }
      &:nth-of-type(2) {
        @include dawuti.animate-translate( 1s 3s ease-in forwards, -100px, 0, 0, 0);
      }
      &:nth-of-type(3) {
       
        @include dawuti.animate-translate( 1s 3s ease-in forwards, 0, 100px, 0, 0);
      }
      &:nth-of-type(4) {
        @include dawuti.animate-translate( 1s 3s ease-in forwards, 0, 0, -50px, -20px);

      }
      &:nth-of-type(5) {
        @include dawuti.animate-translate( 1s 3s ease-in forwards, 0, 0, -100px, 0);
        //TODO: Pensar en una forma mejor de combinar animaciones
        animation: translate 1s 3s ease-in forwards, opacity 4s 0s ease-in forwards;
      }
      &:nth-of-type(6) {
        @include dawuti.animate-translate(2s 3s linear infinite alternate, 0, 0, 200px, 0);

      }
    }
  }

  #scale {
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-scale(1s 3s ease-in forwards, 1, 0)
      }
      &:nth-of-type(2) {
        @include dawuti.animate-scale(1s 3s ease-in forwards, 0, 1)
      }
      &:nth-of-type(3) {
        @include dawuti.animate-scale(1s 3s ease-in alternate, 0, 1)
      }
      &:nth-of-type(4) {
        @include dawuti.animate-scale(1s 3s ease-in both, 0, 1.5)
      }
      &:nth-of-type(5) {
        @include dawuti.animate-scale(1s 3s ease-in reverse both, 0, 1.5)
      }
      &:nth-of-type(4) {
        @include dawuti.animate-scale(1s 3s ease-in both, 1, 0)
      }
      &:nth-of-type(4) {
        @include dawuti.animate-scale(10s steps(10, end), 0, 1.2)
      }
    }
  }

  #rotate{
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-rotate(1s 3s ease-in backwards, 0deg, 180deg)
      }
      &:nth-of-type(2) {
        @include dawuti.animate-rotate(1s 3s ease-in forwards, 0deg, 180deg)
      }
      &:nth-of-type(3) {
        @include dawuti.animate-rotate(1s 3s ease-in alternate, 0deg, 180deg)
      }
      &:nth-of-type(4) {
        @include dawuti.animate-rotate(1s 3s ease-in both, 0deg, 180deg)
      }
      &:nth-of-type(5) {
        @include dawuti.animate-rotate(1s 3s reverse both, 0deg, 180deg)
      }
      &:nth-of-type(6) {
        @include dawuti.animate-rotate(1s 3s ease-in both, 0deg, 180deg)
      }
      &:nth-of-type(7) {
        @include dawuti.animate-rotate(2000ms linear infinite, 0deg, 180deg)
      }
      
    }
  }

  #scale-elastic{
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-scale-elastic("1", 1s 3s ease-in backwards, 1, 1.25, 1, 0%, 80%, 100%)
      }
      &:nth-of-type(2) {
        @include dawuti.animate-scale-elastic("2", 1s 3s ease-in forwards, 1, 1.25, 1, 0%, 80%, 100%)
      }
      &:nth-of-type(3) {
        @include dawuti.animate-scale-elastic("3", 1s 3s ease-in alternate, 1, 1.25, 1,  0%, 80%, 100%)
      }
      &:nth-of-type(4) {
        @include dawuti.animate-scale-elastic("4", 1s 3s ease-in both, 1, 1.25, 1, 0%, 80%, 100%)
      }
      &:nth-of-type(5) {
        @include dawuti.animate-scale-elastic("5", 1s 3s ease-in reverse both, 1, 1.25, 1, 0%, 80%, 100%)
      }
      &:nth-of-type(6) {
        @include dawuti.animate-scale-elastic("6", 1s 3s ease-in both, 1, 1.25, 1, 0%, 80%, 100%)
      }
    }
  }

  #transforms {
    .multiple {
      .el {
        &:nth-of-type(1) {
          @include dawuti.animate-transforms("a", "0", "100px", "0deg", "360deg", "0", "1");
        }
        &:nth-of-type(2) {
          @include dawuti.animate-transforms("b", "0", "0", "0deg", "360deg", "0", "1");
        }
        &:nth-of-type(3) {
          @include dawuti.animate-transforms("c", "0", "100px", "0", "0", "0", "1");
        }
      }
    }
  }

  #skew{
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-skew(1s 3s ease-in forwards, 10deg, 0deg, 0deg, 0deg)

      }
    }
  }

  #filter{
    .el {
      &:nth-of-type(1) {
        @include dawuti.animate-filter(1s 3s ease-in forwards,blur(5px) brightness(0.5),  blur(0) brightness(0))
      }
      &:nth-of-type(2) {
        @include dawuti.animate-filter(1s 3s ease-in forwards,sepia(100%), sepia(0));
      }
      &:nth-of-type(3) {
        @include dawuti.animate-filter(1s 3s ease-in forwards,opacity(0), opacity(1));
      }
      &:nth-of-type(4) {
        @include dawuti.animate-filter(1s 3s ease-in forwards,drop-shadow(7px 6px 6px rgba(0,0,0,0.3)),none);
      }
    }
  }


  #combinations {
    > .el {
      pointer-events: none;

      &:first-child {
        @include dawuti.animate-translate(1s 3s ease-in forwards, 0, 100px, 0px, 0px);
        .el {
          @include dawuti.animate-scale(1s 3s ease-in forwards, 0, 1);
        }
      }
      &:nth-of-type(2) {
        --start-y: 100px;
        --end-y: 0px;
        animation: translate 1s 3s ease-in backwards,
          opacity 1s 3s ease-in backwards;
          
        .el {
          animation: scale 1s 3s ease-in backwards;
        }
      }

      &:nth-of-type(3) {
        @include dawuti.animate-opacity(1s 2s ease-in forwards, 0, 1);
        .el {

          @include dawuti.animate-scale(1s 2s ease-in forwards, 2, 1);
        }
      }

      &:nth-of-type(4) {
        @include dawuti.animate-translate(1s 3s ease-in forwards, 0,0,0px,30px);
        .el {
          @include dawuti.animate-translate(1s 3s ease-in forwards, 0, -100px, 0px, 0px);
        }
      }
    }
  }


  .display-wrapper {
    --color-light: #000000;
    --color-dark: #ffffff;
    --color-box: rgba(0, 0, 150, 0.2);
    --color-grey-200: #f2f2f2;

    @media (prefers-color-scheme: light) {
      --color-light: #ffffff;
      --color-dark: #000000;
      --color-box: rgba(0, 0, 150, 0.2);
      --color-grey-200: #f2f2f2;
    }
    color: var(--color-dark);
    .el {
      cursor: pointer;
    }
  

    .dash {
      > .el {
        pointer-events: none;
        &:nth-of-type(1) {
          svg path {
     
            @include dawuti.animate-dash('2s linear forwards')
          }
        }
        &:nth-of-type(2) {
          svg path {
            @include dawuti.animate-dash('2s linear alternate infinite')

          }
        }
      }
    }
    .delays {
      > div {
        @include dawuti.animate-opacity(1s 3s ease-in forwards, 0, 1);
        @include dawuti.animate-delays(1, 6, 0.2s);
      }
    }
  }

  .editor-wrapper {
    position: absolute;
    top: 0;
    bottom: 0;
    display: none;
    width: 100%;
    height: 100%;
    #backdrop {
      position: fixed;
      background: rgba(0, 0, 0, 0.1);
      width: 100%;
      height: 100%;
      top: 0;
      animation: opacity 0.3s ease-in-out forwards;
    }
    &.open {
      display: block;
      .editor-card {
        width: 100%;
        box-shadow: 0px -9px 17px 11px rgb(0 0 0 / 13%);
        --start-y: 0px;
        --end-y: -50vh;
        animation: translate 0.3s ease-in-out forwards;
        position: fixed;
        width: 100%;
        box-shadow: 5px 5px;
        top: 100%;
        background: white;
        height: 50vh;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        padding: 0 5vw;
      }
    }
    .el-editor {
      width: 200px;
      height: 200px;
    }

    form {
      display: flex;
      flex-flow: column;
      padding: 20px 0;
      justify-content: center;
      select {
        padding: 10px;
      }
      textarea {
        margin-top: 20px;
      }

      .actions {
        display: flex;
        min-width: 100%;
        gap: 10px;
        button {
          margin-top: 20px;
          padding: 10px;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          svg {
            height: 20px;
            margin-right: 10px;
          }
          &:first-child {
            flex-basis: 25%;
          }
          &:last-child {
            flex-basis: 75%;
          }
        }
      }
    }

    .editor-display {
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }
}
